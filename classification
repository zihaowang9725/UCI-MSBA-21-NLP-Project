{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn import preprocessing\n",
    "pd.set_option('display.max_columns',None)\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "train=pd.read_csv('train.csv', usecols=['section','headline','abstract','keywords','word_count','is_popular','uniqueID'])\n",
    "test=pd.read_csv('test.csv',usecols=['section','headline','abstract','keywords','word_count','is_popular'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Opinion', 'Crosswords & Games', 'Science', 'World', 'Magazine',\n",
       "       'Books', 'Well', 'Arts', 'Real Estate', 'Business Day', 'Theater',\n",
       "       'Movies', 'Style', 'New York', 'U.S.', 'Obituaries',\n",
       "       'The Learning Network', 'Sports', 'Travel', 'Health', 'Podcasts',\n",
       "       'Technology', 'Food', 'The Upshot', 'Reader Center', 'Climate',\n",
       "       'Fashion & Style', 'The Weekly', 'T Magazine', 'Automobiles',\n",
       "       'Sunday Review', 'Education', 'Smarter Living', 'Times Insider',\n",
       "       'Parenting', 'Your Money', 'At Home', 'Briefing', 'Video',\n",
       "       'International Home', 'Universal'], dtype=object)"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['section'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "#comments=pd.read_csv('nyt-comments-2020.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "div=pd.read_csv('article_sentimentDiversity.csv')\n",
    "train2=pd.read_csv('train2.csv',usecols=['uniqueID','SimilarCount'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "#comments_df.to_csv (r'/Users/owner/Dropbox/UCI/Spring 2021/NLP/comments_df.csv/', index = False, header=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "#train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "section_dummies = pd.get_dummies(train['section'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "train = pd.concat([train, section_dummies], axis = 1)\n",
    "train.drop('section',axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "train=pd.merge(train,div,left_on='uniqueID',right_on='articleID')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "train=pd.merge(train,train2,left_on='articleID',right_on='uniqueID')\n",
    "train.drop(['uniqueID_x','uniqueID_y'],axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "train.drop('articleID',axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>headline</th>\n",
       "      <th>abstract</th>\n",
       "      <th>keywords</th>\n",
       "      <th>word_count</th>\n",
       "      <th>is_popular</th>\n",
       "      <th>Arts</th>\n",
       "      <th>At Home</th>\n",
       "      <th>Automobiles</th>\n",
       "      <th>Books</th>\n",
       "      <th>Briefing</th>\n",
       "      <th>Business Day</th>\n",
       "      <th>Climate</th>\n",
       "      <th>Crosswords &amp; Games</th>\n",
       "      <th>Education</th>\n",
       "      <th>Fashion &amp; Style</th>\n",
       "      <th>Food</th>\n",
       "      <th>Health</th>\n",
       "      <th>International Home</th>\n",
       "      <th>Magazine</th>\n",
       "      <th>Movies</th>\n",
       "      <th>New York</th>\n",
       "      <th>Obituaries</th>\n",
       "      <th>Opinion</th>\n",
       "      <th>Parenting</th>\n",
       "      <th>Podcasts</th>\n",
       "      <th>Reader Center</th>\n",
       "      <th>Real Estate</th>\n",
       "      <th>Science</th>\n",
       "      <th>Smarter Living</th>\n",
       "      <th>Sports</th>\n",
       "      <th>Style</th>\n",
       "      <th>Sunday Review</th>\n",
       "      <th>T Magazine</th>\n",
       "      <th>Technology</th>\n",
       "      <th>The Learning Network</th>\n",
       "      <th>The Upshot</th>\n",
       "      <th>The Weekly</th>\n",
       "      <th>Theater</th>\n",
       "      <th>Times Insider</th>\n",
       "      <th>Travel</th>\n",
       "      <th>U.S.</th>\n",
       "      <th>Universal</th>\n",
       "      <th>Video</th>\n",
       "      <th>Well</th>\n",
       "      <th>World</th>\n",
       "      <th>Your Money</th>\n",
       "      <th>com_compound</th>\n",
       "      <th>SimilarCount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Protect Veterans From Fraud</td>\n",
       "      <td>Congress could do much more to protect America...</td>\n",
       "      <td>['Veterans', 'For-Profit Schools', 'Financial ...</td>\n",
       "      <td>680</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.362798</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>‘It’s Green and Slimy’</td>\n",
       "      <td>Christina Iverson and Jeff Chen ring in the Ne...</td>\n",
       "      <td>['Crossword Puzzles']</td>\n",
       "      <td>931</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.220087</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Meteor Showers in 2020 That Will Light Up Nigh...</td>\n",
       "      <td>All year long, Earth passes through streams of...</td>\n",
       "      <td>['Meteors and Meteorites', 'Space and Astronom...</td>\n",
       "      <td>1057</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.278527</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Sync your calendar with the solar system</td>\n",
       "      <td>Never miss an eclipse, a meteor shower, a rock...</td>\n",
       "      <td>['Space and Astronomy', 'Moon', 'Eclipses', 'S...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Rocket Launches, Trips to Mars and More 2020 S...</td>\n",
       "      <td>A year full of highs and lows in space just en...</td>\n",
       "      <td>['Space and Astronomy', 'Private Spaceflight',...</td>\n",
       "      <td>1156</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.317136</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                            headline  \\\n",
       "0                        Protect Veterans From Fraud   \n",
       "1                             ‘It’s Green and Slimy’   \n",
       "2  Meteor Showers in 2020 That Will Light Up Nigh...   \n",
       "3           Sync your calendar with the solar system   \n",
       "4  Rocket Launches, Trips to Mars and More 2020 S...   \n",
       "\n",
       "                                            abstract  \\\n",
       "0  Congress could do much more to protect America...   \n",
       "1  Christina Iverson and Jeff Chen ring in the Ne...   \n",
       "2  All year long, Earth passes through streams of...   \n",
       "3  Never miss an eclipse, a meteor shower, a rock...   \n",
       "4  A year full of highs and lows in space just en...   \n",
       "\n",
       "                                            keywords  word_count  is_popular  \\\n",
       "0  ['Veterans', 'For-Profit Schools', 'Financial ...         680           1   \n",
       "1                              ['Crossword Puzzles']         931           1   \n",
       "2  ['Meteors and Meteorites', 'Space and Astronom...        1057           0   \n",
       "3  ['Space and Astronomy', 'Moon', 'Eclipses', 'S...           0           0   \n",
       "4  ['Space and Astronomy', 'Private Spaceflight',...        1156           0   \n",
       "\n",
       "   Arts  At Home  Automobiles  Books  Briefing  Business Day  Climate  \\\n",
       "0     0        0            0      0         0             0        0   \n",
       "1     0        0            0      0         0             0        0   \n",
       "2     0        0            0      0         0             0        0   \n",
       "3     0        0            0      0         0             0        0   \n",
       "4     0        0            0      0         0             0        0   \n",
       "\n",
       "   Crosswords & Games  Education  Fashion & Style  Food  Health  \\\n",
       "0                   0          0                0     0       0   \n",
       "1                   1          0                0     0       0   \n",
       "2                   0          0                0     0       0   \n",
       "3                   0          0                0     0       0   \n",
       "4                   0          0                0     0       0   \n",
       "\n",
       "   International Home  Magazine  Movies  New York  Obituaries  Opinion  \\\n",
       "0                   0         0       0         0           0        1   \n",
       "1                   0         0       0         0           0        0   \n",
       "2                   0         0       0         0           0        0   \n",
       "3                   0         0       0         0           0        0   \n",
       "4                   0         0       0         0           0        0   \n",
       "\n",
       "   Parenting  Podcasts  Reader Center  Real Estate  Science  Smarter Living  \\\n",
       "0          0         0              0            0        0               0   \n",
       "1          0         0              0            0        0               0   \n",
       "2          0         0              0            0        1               0   \n",
       "3          0         0              0            0        1               0   \n",
       "4          0         0              0            0        1               0   \n",
       "\n",
       "   Sports  Style  Sunday Review  T Magazine  Technology  The Learning Network  \\\n",
       "0       0      0              0           0           0                     0   \n",
       "1       0      0              0           0           0                     0   \n",
       "2       0      0              0           0           0                     0   \n",
       "3       0      0              0           0           0                     0   \n",
       "4       0      0              0           0           0                     0   \n",
       "\n",
       "   The Upshot  The Weekly  Theater  Times Insider  Travel  U.S.  Universal  \\\n",
       "0           0           0        0              0       0     0          0   \n",
       "1           0           0        0              0       0     0          0   \n",
       "2           0           0        0              0       0     0          0   \n",
       "3           0           0        0              0       0     0          0   \n",
       "4           0           0        0              0       0     0          0   \n",
       "\n",
       "   Video  Well  World  Your Money  com_compound  SimilarCount  \n",
       "0      0     0      0           0      0.362798           0.0  \n",
       "1      0     0      0           0      0.220087           0.0  \n",
       "2      0     0      0           0      0.278527           0.0  \n",
       "3      0     0      0           0      0.000000           0.0  \n",
       "4      0     0      0           0      0.317136           0.0  "
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pingouin as pg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>X</th>\n",
       "      <th>Y</th>\n",
       "      <th>method</th>\n",
       "      <th>tail</th>\n",
       "      <th>n</th>\n",
       "      <th>r</th>\n",
       "      <th>CI95%</th>\n",
       "      <th>p-unc</th>\n",
       "      <th>BF10</th>\n",
       "      <th>power</th>\n",
       "      <th>r_abs</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Opinion</td>\n",
       "      <td>is_popular</td>\n",
       "      <td>pearson</td>\n",
       "      <td>two-sided</td>\n",
       "      <td>12792</td>\n",
       "      <td>0.346508</td>\n",
       "      <td>[0.33, 0.36]</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>inf</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.346508</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>U.S.</td>\n",
       "      <td>is_popular</td>\n",
       "      <td>pearson</td>\n",
       "      <td>two-sided</td>\n",
       "      <td>12792</td>\n",
       "      <td>0.186373</td>\n",
       "      <td>[0.17, 0.2]</td>\n",
       "      <td>2.469716e-100</td>\n",
       "      <td>1.636e+96</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.186373</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Arts</td>\n",
       "      <td>is_popular</td>\n",
       "      <td>pearson</td>\n",
       "      <td>two-sided</td>\n",
       "      <td>12792</td>\n",
       "      <td>-0.185281</td>\n",
       "      <td>[-0.2, -0.17]</td>\n",
       "      <td>3.649343e-99</td>\n",
       "      <td>1.114e+95</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.185281</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>com_compound</td>\n",
       "      <td>is_popular</td>\n",
       "      <td>pearson</td>\n",
       "      <td>two-sided</td>\n",
       "      <td>12568</td>\n",
       "      <td>0.180941</td>\n",
       "      <td>[0.16, 0.2]</td>\n",
       "      <td>5.793208e-93</td>\n",
       "      <td>7.325e+88</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.180941</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>word_count</td>\n",
       "      <td>is_popular</td>\n",
       "      <td>pearson</td>\n",
       "      <td>two-sided</td>\n",
       "      <td>12792</td>\n",
       "      <td>0.171316</td>\n",
       "      <td>[0.15, 0.19]</td>\n",
       "      <td>7.610629e-85</td>\n",
       "      <td>5.805e+80</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.171316</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Podcasts</td>\n",
       "      <td>is_popular</td>\n",
       "      <td>pearson</td>\n",
       "      <td>two-sided</td>\n",
       "      <td>12792</td>\n",
       "      <td>-0.139503</td>\n",
       "      <td>[-0.16, -0.12]</td>\n",
       "      <td>1.317288e-56</td>\n",
       "      <td>4.155e+52</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.139503</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>Sports</td>\n",
       "      <td>is_popular</td>\n",
       "      <td>pearson</td>\n",
       "      <td>two-sided</td>\n",
       "      <td>12792</td>\n",
       "      <td>-0.124124</td>\n",
       "      <td>[-0.14, -0.11]</td>\n",
       "      <td>4.266619e-45</td>\n",
       "      <td>1.446e+41</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.124124</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Real Estate</td>\n",
       "      <td>is_popular</td>\n",
       "      <td>pearson</td>\n",
       "      <td>two-sided</td>\n",
       "      <td>12792</td>\n",
       "      <td>-0.117060</td>\n",
       "      <td>[-0.13, -0.1]</td>\n",
       "      <td>2.864398e-40</td>\n",
       "      <td>2.287e+36</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.117060</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Books</td>\n",
       "      <td>is_popular</td>\n",
       "      <td>pearson</td>\n",
       "      <td>two-sided</td>\n",
       "      <td>12792</td>\n",
       "      <td>-0.110965</td>\n",
       "      <td>[-0.13, -0.09]</td>\n",
       "      <td>2.457861e-36</td>\n",
       "      <td>2.814e+32</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.110965</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>Theater</td>\n",
       "      <td>is_popular</td>\n",
       "      <td>pearson</td>\n",
       "      <td>two-sided</td>\n",
       "      <td>12792</td>\n",
       "      <td>-0.104344</td>\n",
       "      <td>[-0.12, -0.09]</td>\n",
       "      <td>2.645280e-32</td>\n",
       "      <td>2.782e+28</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.104344</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Crosswords &amp; Games</td>\n",
       "      <td>is_popular</td>\n",
       "      <td>pearson</td>\n",
       "      <td>two-sided</td>\n",
       "      <td>12792</td>\n",
       "      <td>0.096144</td>\n",
       "      <td>[0.08, 0.11]</td>\n",
       "      <td>1.175199e-27</td>\n",
       "      <td>6.799e+23</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.096144</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Science</td>\n",
       "      <td>is_popular</td>\n",
       "      <td>pearson</td>\n",
       "      <td>two-sided</td>\n",
       "      <td>12792</td>\n",
       "      <td>-0.093137</td>\n",
       "      <td>[-0.11, -0.08]</td>\n",
       "      <td>4.769855e-26</td>\n",
       "      <td>1.729e+22</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.093137</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Food</td>\n",
       "      <td>is_popular</td>\n",
       "      <td>pearson</td>\n",
       "      <td>two-sided</td>\n",
       "      <td>12792</td>\n",
       "      <td>-0.065816</td>\n",
       "      <td>[-0.08, -0.05]</td>\n",
       "      <td>9.242861e-14</td>\n",
       "      <td>1.258e+10</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.065816</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>The Upshot</td>\n",
       "      <td>is_popular</td>\n",
       "      <td>pearson</td>\n",
       "      <td>two-sided</td>\n",
       "      <td>12792</td>\n",
       "      <td>0.065249</td>\n",
       "      <td>[0.05, 0.08]</td>\n",
       "      <td>1.502745e-13</td>\n",
       "      <td>7.801e+09</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.065249</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>T Magazine</td>\n",
       "      <td>is_popular</td>\n",
       "      <td>pearson</td>\n",
       "      <td>two-sided</td>\n",
       "      <td>12792</td>\n",
       "      <td>-0.060261</td>\n",
       "      <td>[-0.08, -0.04]</td>\n",
       "      <td>9.029788e-12</td>\n",
       "      <td>1.403e+08</td>\n",
       "      <td>0.999999</td>\n",
       "      <td>0.060261</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Reader Center</td>\n",
       "      <td>is_popular</td>\n",
       "      <td>pearson</td>\n",
       "      <td>two-sided</td>\n",
       "      <td>12792</td>\n",
       "      <td>-0.057656</td>\n",
       "      <td>[-0.07, -0.04]</td>\n",
       "      <td>6.763356e-11</td>\n",
       "      <td>1.954e+07</td>\n",
       "      <td>0.999998</td>\n",
       "      <td>0.057656</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Parenting</td>\n",
       "      <td>is_popular</td>\n",
       "      <td>pearson</td>\n",
       "      <td>two-sided</td>\n",
       "      <td>12792</td>\n",
       "      <td>-0.056693</td>\n",
       "      <td>[-0.07, -0.04]</td>\n",
       "      <td>1.393415e-10</td>\n",
       "      <td>9.641e+06</td>\n",
       "      <td>0.999996</td>\n",
       "      <td>0.056693</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>SimilarCount</td>\n",
       "      <td>is_popular</td>\n",
       "      <td>pearson</td>\n",
       "      <td>two-sided</td>\n",
       "      <td>12792</td>\n",
       "      <td>0.053970</td>\n",
       "      <td>[0.04, 0.07]</td>\n",
       "      <td>1.009135e-09</td>\n",
       "      <td>1.396e+06</td>\n",
       "      <td>0.999983</td>\n",
       "      <td>0.053970</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>Times Insider</td>\n",
       "      <td>is_popular</td>\n",
       "      <td>pearson</td>\n",
       "      <td>two-sided</td>\n",
       "      <td>12792</td>\n",
       "      <td>-0.053206</td>\n",
       "      <td>[-0.07, -0.04]</td>\n",
       "      <td>1.729500e-09</td>\n",
       "      <td>8.255e+05</td>\n",
       "      <td>0.999976</td>\n",
       "      <td>0.053206</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Style</td>\n",
       "      <td>is_popular</td>\n",
       "      <td>pearson</td>\n",
       "      <td>two-sided</td>\n",
       "      <td>12792</td>\n",
       "      <td>-0.051773</td>\n",
       "      <td>[-0.07, -0.03]</td>\n",
       "      <td>4.658021e-09</td>\n",
       "      <td>3.146e+05</td>\n",
       "      <td>0.999952</td>\n",
       "      <td>0.051773</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     X           Y   method       tail      n         r  \\\n",
       "18             Opinion  is_popular  pearson  two-sided  12792  0.346508   \n",
       "36                U.S.  is_popular  pearson  two-sided  12792  0.186373   \n",
       "1                 Arts  is_popular  pearson  two-sided  12792 -0.185281   \n",
       "42        com_compound  is_popular  pearson  two-sided  12568  0.180941   \n",
       "0           word_count  is_popular  pearson  two-sided  12792  0.171316   \n",
       "20            Podcasts  is_popular  pearson  two-sided  12792 -0.139503   \n",
       "25              Sports  is_popular  pearson  two-sided  12792 -0.124124   \n",
       "22         Real Estate  is_popular  pearson  two-sided  12792 -0.117060   \n",
       "4                Books  is_popular  pearson  two-sided  12792 -0.110965   \n",
       "33             Theater  is_popular  pearson  two-sided  12792 -0.104344   \n",
       "8   Crosswords & Games  is_popular  pearson  two-sided  12792  0.096144   \n",
       "23             Science  is_popular  pearson  two-sided  12792 -0.093137   \n",
       "11                Food  is_popular  pearson  two-sided  12792 -0.065816   \n",
       "31          The Upshot  is_popular  pearson  two-sided  12792  0.065249   \n",
       "28          T Magazine  is_popular  pearson  two-sided  12792 -0.060261   \n",
       "21       Reader Center  is_popular  pearson  two-sided  12792 -0.057656   \n",
       "19           Parenting  is_popular  pearson  two-sided  12792 -0.056693   \n",
       "43        SimilarCount  is_popular  pearson  two-sided  12792  0.053970   \n",
       "34       Times Insider  is_popular  pearson  two-sided  12792 -0.053206   \n",
       "26               Style  is_popular  pearson  two-sided  12792 -0.051773   \n",
       "\n",
       "             CI95%          p-unc       BF10     power     r_abs  \n",
       "18    [0.33, 0.36]   0.000000e+00        inf  1.000000  0.346508  \n",
       "36     [0.17, 0.2]  2.469716e-100  1.636e+96  1.000000  0.186373  \n",
       "1    [-0.2, -0.17]   3.649343e-99  1.114e+95  1.000000  0.185281  \n",
       "42     [0.16, 0.2]   5.793208e-93  7.325e+88  1.000000  0.180941  \n",
       "0     [0.15, 0.19]   7.610629e-85  5.805e+80  1.000000  0.171316  \n",
       "20  [-0.16, -0.12]   1.317288e-56  4.155e+52  1.000000  0.139503  \n",
       "25  [-0.14, -0.11]   4.266619e-45  1.446e+41  1.000000  0.124124  \n",
       "22   [-0.13, -0.1]   2.864398e-40  2.287e+36  1.000000  0.117060  \n",
       "4   [-0.13, -0.09]   2.457861e-36  2.814e+32  1.000000  0.110965  \n",
       "33  [-0.12, -0.09]   2.645280e-32  2.782e+28  1.000000  0.104344  \n",
       "8     [0.08, 0.11]   1.175199e-27  6.799e+23  1.000000  0.096144  \n",
       "23  [-0.11, -0.08]   4.769855e-26  1.729e+22  1.000000  0.093137  \n",
       "11  [-0.08, -0.05]   9.242861e-14  1.258e+10  1.000000  0.065816  \n",
       "31    [0.05, 0.08]   1.502745e-13  7.801e+09  1.000000  0.065249  \n",
       "28  [-0.08, -0.04]   9.029788e-12  1.403e+08  0.999999  0.060261  \n",
       "21  [-0.07, -0.04]   6.763356e-11  1.954e+07  0.999998  0.057656  \n",
       "19  [-0.07, -0.04]   1.393415e-10  9.641e+06  0.999996  0.056693  \n",
       "43    [0.04, 0.07]   1.009135e-09  1.396e+06  0.999983  0.053970  \n",
       "34  [-0.07, -0.04]   1.729500e-09  8.255e+05  0.999976  0.053206  \n",
       "26  [-0.07, -0.03]   4.658021e-09  3.146e+05  0.999952  0.051773  "
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr = pg.pairwise_corr(train, columns=[['word_count', 'Arts',\n",
    "       'At Home', 'Automobiles', 'Books', 'Briefing', 'Business Day',\n",
    "       'Climate', 'Crosswords & Games', 'Education', 'Fashion & Style', 'Food',\n",
    "       'Health', 'International Home', 'Magazine', 'Movies', 'New York',\n",
    "       'Obituaries', 'Opinion', 'Parenting', 'Podcasts', 'Reader Center',\n",
    "       'Real Estate', 'Science', 'Smarter Living', 'Sports', 'Style',\n",
    "       'Sunday Review', 'T Magazine', 'Technology', 'The Learning Network',\n",
    "       'The Upshot', 'The Weekly', 'Theater', 'Times Insider', 'Travel',\n",
    "       'U.S.', 'Universal', 'Video', 'Well', 'World', 'Your Money',\n",
    "       'com_compound', 'SimilarCount']], method='pearson')\n",
    "corr[\"r_abs\"]=corr[[\"r\"]].abs()\n",
    "\n",
    "corr.sort_values(by=\"r_abs\", ascending=False, inplace=True)\n",
    "corr=corr[0:20]\n",
    "corr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 2160x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(30,10))\n",
    "plt.title(\"Correlation\")\n",
    "plt.bar(corr['X'], corr['r'],\n",
    "       color='green',align=\"center\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "#train.groupby(by=[\"section\"]).sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "#train['section'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "scaler = preprocessing.MinMaxScaler()\n",
    "train['word_count']=scaler.fit_transform(train[['word_count']])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "import re\n",
    "import string\n",
    "from nltk.stem import PorterStemmer\n",
    "porter = PorterStemmer()\n",
    "from nltk.tokenize import word_tokenize\n",
    "from nltk.corpus import stopwords\n",
    "stop = stopwords.words('english')\n",
    "from nltk.stem import WordNetLemmatizer\n",
    "wnl = WordNetLemmatizer()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "train['headline'] = train['headline'].map(lambda x:' '.join((x.split('|'))))\n",
    "train['headline'] = train['headline'].map(lambda x: x.lower())\n",
    "train['headline'] = train['headline'].map(lambda x: re.sub(r'\\d+', '', x))\n",
    "train['headline'] = train['headline'].map(lambda x: x.translate(x.maketrans('', '', string.punctuation)))\n",
    "train['headline'] = train['headline'].map(lambda x: x.strip())\n",
    "train['headline'] = train['headline'].map(lambda x: word_tokenize(x))\n",
    "train['headline']= train['headline'].map(lambda x: [word for word in x if word.isalpha()])\n",
    "train['headline'] = train['headline'].map(lambda x: [w for w in x if not w in stop])\n",
    "train['headline'] = train['headline'].map(lambda x: [wnl.lemmatize(word,\"v\") for word in x])\n",
    "train['headline'] = train['headline'].map(lambda x: ' '.join(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "train['abstract'] = train['abstract'].map(lambda x:' '.join((str(x).split('|'))))\n",
    "train['abstract'] = train['abstract'].map(lambda x: x.lower())\n",
    "train['abstract'] = train['abstract'].map(lambda x: re.sub(r'\\d+', '', x))\n",
    "train['abstract'] = train['abstract'].map(lambda x: x.translate(x.maketrans('', '', string.punctuation)))\n",
    "train['abstract'] = train['abstract'].map(lambda x: x.strip())\n",
    "train['abstract'] = train['abstract'].map(lambda x: word_tokenize(x))\n",
    "train['abstract']= train['abstract'].map(lambda x: [word for word in x if word.isalpha()])\n",
    "train['abstract'] = train['abstract'].map(lambda x: [w for w in x if not w in stop])\n",
    "train['abstract'] = train['abstract'].map(lambda x: [wnl.lemmatize(word,\"v\") for word in x])\n",
    "train['abstract'] = train['abstract'].map(lambda x: ' '.join(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "train['keywords'] = train['keywords'].map(lambda x:' '.join((str(x).split('|'))))\n",
    "train['keywords'] = train['keywords'].map(lambda x: x.lower())\n",
    "train['keywords'] = train['keywords'].map(lambda x: re.sub(r'\\d+', '', x))\n",
    "train['keywords'] = train['keywords'].map(lambda x: x.translate(x.maketrans('', '', string.punctuation)))\n",
    "train['keywords'] = train['keywords'].map(lambda x: x.strip())\n",
    "train['keywords'] = train['keywords'].map(lambda x: word_tokenize(x))\n",
    "train['keywords']= train['keywords'].map(lambda x: [word for word in x if word.isalpha()])\n",
    "train['keywords'] = train['keywords'].map(lambda x: [w for w in x if not w in stop])\n",
    "train['keywords'] = train['keywords'].map(lambda x: [wnl.lemmatize(word,\"v\") for word in x])\n",
    "train['keywords'] = train['keywords'].map(lambda x: ' '.join(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "tfidf_title = TfidfVectorizer()\n",
    "tfidf_tags = TfidfVectorizer()\n",
    "tfidf_keywords = TfidfVectorizer()\n",
    "labels = train.is_popular\n",
    "features_title = tfidf_title.fit_transform(train.headline).toarray()\n",
    "features_abstract = tfidf_tags.fit_transform(train.abstract).toarray()\n",
    "features_keywords = tfidf_keywords.fit_transform(train.keywords).toarray()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "from sklearn import linear_model\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import confusion_matrix, classification_report\n",
    "from sklearn import metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "X=train.drop('is_popular',axis=1)\n",
    "y=train['is_popular']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X,y, random_state = 0)\n",
    "X_train_title_features = tfidf_title.transform(X_train['headline']).toarray()\n",
    "X_train_tags_features = tfidf_tags.transform(X_train['abstract']).toarray()\n",
    "X_train_keywords_features = tfidf_keywords.transform(X_train['keywords']).toarray()\n",
    "X_train_word_count=X_train['word_count'].array\n",
    "features = np.concatenate([X_train_title_features, X_train_tags_features,X_train_keywords_features], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_test_title_features = tfidf_title.transform(X_test['headline']).toarray()\n",
    "X_test_tags_features = tfidf_tags.transform(X_test['abstract']).toarray()\n",
    "X_test_keywords_features = tfidf_keywords.transform(X_test['keywords']).toarray()\n",
    "\n",
    "test_features = np.concatenate([X_test_title_features, X_test_tags_features,X_test_keywords_features], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy.sparse import coo_matrix, hstack"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1126  502]\n",
      " [ 339 1231]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.77      0.69      0.73      1628\n",
      "           1       0.71      0.78      0.75      1570\n",
      "\n",
      "    accuracy                           0.74      3198\n",
      "   macro avg       0.74      0.74      0.74      3198\n",
      "weighted avg       0.74      0.74      0.74      3198\n",
      "\n"
     ]
    }
   ],
   "source": [
    "nb = MultinomialNB().fit(features, y_train)\n",
    "y_pred = nb.predict(test_features)\n",
    "\n",
    "print(confusion_matrix(y_test, y_pred))\n",
    "print(metrics.classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1216  412]\n",
      " [ 419 1151]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.74      0.75      0.75      1628\n",
      "           1       0.74      0.73      0.73      1570\n",
      "\n",
      "    accuracy                           0.74      3198\n",
      "   macro avg       0.74      0.74      0.74      3198\n",
      "weighted avg       0.74      0.74      0.74      3198\n",
      "\n"
     ]
    }
   ],
   "source": [
    "lm = linear_model.SGDClassifier(loss='log').fit(features,y_train)\n",
    "y_pred = lm.predict(test_features)\n",
    "y_probas = lm.predict_proba(test_features)\n",
    "\n",
    "print(confusion_matrix(y_test, y_pred))\n",
    "print(metrics.classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1229  399]\n",
      " [ 436 1134]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.74      0.75      0.75      1628\n",
      "           1       0.74      0.72      0.73      1570\n",
      "\n",
      "    accuracy                           0.74      3198\n",
      "   macro avg       0.74      0.74      0.74      3198\n",
      "weighted avg       0.74      0.74      0.74      3198\n",
      "\n"
     ]
    }
   ],
   "source": [
    "rf = RandomForestClassifier(n_estimators=300,min_samples_split=0.05).fit(features,y_train)\n",
    "y_pred = rf.predict(test_features)\n",
    "y_probas = rf.predict_proba(test_features)\n",
    "\n",
    "print(confusion_matrix(y_test, y_pred))\n",
    "print(metrics.classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
